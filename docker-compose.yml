services:

  memcached:
    image: memcached
    restart: unless-stopped
    
  db:
    #image: postgres:16
    image: pgvector/pgvector:pg16
    env_file:
      - '.env'
    volumes:
      - ${APP_DATA_DIR?./app-data}/postgres-data:/var/lib/postgresql/data/
      # - ./postgres-init:/docker-entrypoint-initdb.d/
    healthcheck:
      test: pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      interval: 30s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    #depends_on:
    #  - legacy-db    

  legacy-db:
    image: postgres:16    
    env_file:
      - '.env'
    volumes:
      - ${APP_DATA_DIR?./app-data}/postgres-legacy-data:/var/lib/postgresql/data/
      - ${APP_DATA_DIR?./app-data}/postgres-init:/docker-entrypoint-initdb.d/
    healthcheck:
      test: pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      interval: 30s
      retries: 10
      start_period: 20s      
    restart: unless-stopped

  django:
    image: backface/turtlenest:0.2
    build:
      context:  ./
      dockerfile: Dockerfile
      args:
        DOCKER_BUILDKIT: 1      
    env_file:
      - '.env'      
    depends_on:
      - db
    networks:
      - public_proxy
      - default      
    healthcheck:
      test: curl -o /dev/null localhost/alive|| true 
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s    
    volumes:
      - ${APP_DATA_DIR?./app-data/}/media:/app/app-data/media
      - ./static:/app/static

    restart: unless-stopped
    labels:
      caddy: ${DOMAIN}
      caddy.log: ""
      caddy.@media.path: "/media* /static* /turtlestitch* /snap*"
      caddy.0_redir: "/static/run* /turtlestitch"
      caddy.1_handle: "@media"
      caddy.1_handle.0_root: "/media* /app/"
      caddy.1_handle.1_root: "/run* /app/guis/turtlestitch/"
      caddy.1_handle.2_root: "/static* /app/"
      caddy.1_handle.3_root: "/snap* /app/guis/"
      caddy.1_handle.4_root: "/turtlestitch* /app/guis/"
      caddy.1_handle.5_file_server: ""
      caddy.2_handle.0_reverse_proxy: "{{upstreams 8000}}"


  # redis:
  #   image: redis:7-alpine 
  #   volumes:
  #     - redis-data:/data
  #   healthcheck:
  #     test: redis-cli ping | grep PONG
  #     interval: 30s
  #     retries: 10
  #   restart: unless-stopped

  # celery:
  #   image: backface/turtlenest:latest
  #   build:
  #     context:  ./
  #     dockerfile: Dockerfile
  #   entrypoint: celery -A turtlenest worker -l INFO --beat --concurrency 2
  #   volumes:
  #     - ./:/app
  #   env_file:
  #     - ./.env
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped

  # flower:
  #   image: mher/flower:2.0
  #   container_name: flower
  #   command: celery flower --persisten=True
  #   env_file:
  #     - ./.env
  #   ports:
  #     - 8888:8888 # docker will expose this ports
  #   volumes:
  #    - APP_DATA_DIR/flower-data:/data 
  #   restart: unless-stopped       

  # memcached:
  #   image: memcached:1.6-alpine
  #   restart: unless-stopped
  #   healthcheck:
  #     test: echo "version" | nc -vn -w 1 127.0.0.1 11211
  #     interval: 5s
  #     retries: 10    
  #     start_period: 20s

#volumes:
#  caddy_data:
#   # redis-data:
#   # flower-data:

networks:
  public_proxy:
    name: public_proxy  
    external: true
