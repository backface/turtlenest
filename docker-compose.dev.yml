services:

  caddy:
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    ports:
      - 80:80
      - 443:443
    environment:
      - CADDY_INGRESS_NETWORKS=public_proxy
    networks:
      - public_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${APP_DATA_DIR?./app-data}/caddy_data:/data
      - ${APP_DATA_DIR?./app-data}/media:/app/media
      - ./static:/app/static
      - ../turtlestitch:/app/guis/turtlestitch
      - ../snap:/app/guis/snap
    restart: unless-stopped
    labels:
      caddy.log: ""
      caddy.log.output: "file ${APP_DATA_DIR?./app-data}/logs/access.log"
    # extra_hosts: #only for docker!
    # - "host.docker.internal:host-gateway" 
    # ports: !override
    #  - 8080:80
    #  - 4433:443

  db:
    restart: "no"
    ports:
      - "5432:5432"

  django:
    # command: >
    #   gunicorn -b 0.0.0.0:$PORT
    #    --access-logfile -        
    #    --reload
    #    --workers 2
    #    --timeout $TIMEOUT
    #    turtlenest.wsgi:application  
    command: python manage.py runserver 0.0.0.0:8000 
    volumes:
      - ./:/app
    ports:
      - "8000:8000"
    labels:
      caddy: ${DOMAIN} http://${DOMAIN}      

  # flower:
  #   ports:
  #     - 8888:8888 # docker will expose this ports

# redis:
  #   image: redis:7-alpine 
  #   volumes:
  #     - redis-data:/data
  #   healthcheck:
  #     test: redis-cli ping | grep PONG
  #     interval: 30s
  #     retries: 10
  #   restart: unless-stopped

  # celery:
  #   image: backface/turtlenest:latest
  #   build:
  #     context:  ./
  #     dockerfile: Dockerfile
  #   entrypoint: celery -A turtlenest worker -l INFO --beat --concurrency 2
  #   volumes:
  #     - ./:/app
  #   env_file:
  #     - ./.env
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped

  # flower:
  #   image: mher/flower:2.0
  #   container_name: flower
  #   command: celery flower --persisten=True
  #   env_file:
  #     - ./.env
  #   ports:
  #     - 8888:8888 # docker will expose this ports
  #   volumes:
  #    - APP_DATA_DIR/flower-data:/data 
  #   restart: unless-stopped       

volumes:
  caddy_data:
#   redis-data:
#   flower-data:

networks:
  public_proxy:
    name: public_proxy  
    # For local dev, don't expect an external network
    external: false
