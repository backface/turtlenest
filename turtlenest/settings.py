"""
Django settings for turtlenest project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import sys
from pathlib import Path
from django.utils.translation import gettext_lazy as _
from django.contrib import messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-n1q(gkmgn8unzo4vwvkko))uqa!p907-8gyeek@f6otn5i4+py"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", False)
TESTING = "test" in sys.argv

# APPEND_SLASH = False

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", ["*"])
CORS_ALLOWED_ORIGINS = []
CSRF_TRUSTED_ORIGINS = [
    "https://turtlestitch.org",
    "https://*.turtlestitch.org",
    "https://*.backface.net",
    "https://localhost",
]
INTERNAL_IPS = ["127.0.0.1", "172.20.0.1"]

ENABLE_DEBUG_TOOLBAR = True

# secure defaults
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


ADMINS = (("mash", "m@ash.to"),)

# Application definition

INSTALLED_APPS = [
    # "grappelli",

    "jazzmin",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",

    "taggit",

    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.humanize",

    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    
    "django_htmx",
    
    "allauth",    
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    "allauth.socialaccount.providers.github",
    
    "django_summernote",
    "hijack",
    "hijack.contrib.admin",
    
    "crispy_forms",
    "crispy_tailwind",

    "apps.users.apps.UserConfig",
    "apps.projects",
    "apps.pages",
    "apps.classrooms.apps.ClassroomsConfig",
    "apps.wp_blog",
    "apps.content",
    "apps.legacydb",

    #"django_browser_reload",
    "django_cleanup.apps.CleanupConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_browser_reload.middleware.BrowserReloadMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "turtlenest.middleware.HtmxMessageMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    "hijack.middleware.HijackUserMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

if not TESTING:
    INSTALLED_APPS = [
        *INSTALLED_APPS,
        "debug_toolbar",
    ]
    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        *MIDDLEWARE,
    ]

ROOT_URLCONF = "turtlenest.urls"

AUTH_USER_MODEL = "users.User"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "turtlenest.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB", "dbname"),
        "USER": os.environ.get("POSTGRES_USER", "postgres"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "***"),
        "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    },
    "legacydb": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("LEGACYDB_DB", os.environ.get("POSTGRES_DB", "dbname")),
        "USER": os.environ.get(
            "LEGACYDB_USER", os.environ.get("POSTGRES_USER", "postgres")
        ),
        "PASSWORD": os.environ.get(
            "LEGACYDB_PASSWORD", os.environ.get("POSTGRES_PASSWORD", "***")
        ),
        "HOST": os.environ.get(
            "LEGACYDB_HOST", os.environ.get("LEGACY_HOST", "legacy-db")
        ),
        "PORT": os.environ.get(
            "LEGACYDB_PORT", os.environ.get("POSTGRES_PORT", "5432")
        ),
    },
}
DATABASE_ROUTERS = ["apps.legacydb.dbrouters.LegacyDbRouter"]


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        "LOCATION": "memcached:11211",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

PASSWORD_HASHERS = [
    "apps.users.hashers.SnapPBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.BCryptPasswordHasher",
    "apps.users.hashers.CryptPasswordHasher",
    "apps.users.hashers.SHA512PasswordHasher",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

MESSAGE_TAGS = {
    messages.DEBUG: "alert",
    messages.INFO: "alert alert-info",
    messages.SUCCESS: "alert alert-success",
    messages.WARNING: "alert alert-warning",
    messages.ERROR: "alert alert-error",
}


# Allauth settings
# ----------------------------------------------------------

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
# ACCOUNT_EMAIL_VERIFICATION = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
#ACCOUNT_SIGNUP_FORM_CLASS = "apps.users.forms.MySignupForm"
ACCOUNT_EMAIL_SUBJECT_PREFIX = ""
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_CHANGE_EMAIL=True
ACCOUNT_FORMS = {
    'signup': 'apps.users.forms.TurtleStitchSignupForm',
}

LOGIN_REDIRECT_URL = "/myprojects"
ACCOUNT_ADAPTER = "apps.users.allauth.AccountAdapter"

SOCIALACCOUNT_PROVIDERS = {
    # "github": {
    #     "APP": {
    #         "client_id": "28f278fb843ce057ed78",
    #         "secret": "7d3aa1f15e7cacedc5f85183622674d5414cfe5c",
    #     }
    # },
    # 'google': {
    #     'SCOPE': ['https://www.googleapis.com/auth/userinfo.profile'],
    #     'APP': {
    #         'client_id': '123',
    #         'secret': '456',
    #         'key': ''
    #     }
    # },
    # 'facebook': {
    #     'APP': {
    #         'client_id': '797011021955344',
    #         'secret': '46145bf524b36f38de5fa2b4c1635e7e',
    #         'key': ''
    #     }
    # }
}


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Vienna"

USE_I18N = True

USE_TZ = True

LANGUAGES = [
    ("en", _("English")),
    ("de", _("Deutsch")),
]

LOCALE_PATHS = [
    BASE_DIR / "locale",
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


STATICFILES_DIRS = []

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"

MEDIA_ROOT = BASE_DIR / "app-data" / "media"
MEDIA_URL = "/media/"

# STORAGES = {
#     "default": {
#         "BACKEND": "django.core.files.storage.FileSystemStorage",
#     },
#     "staticfiles": {
#         "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
#         #"BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
#     }
# }

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

###################
# Whitenoise
###################


WHITENOISE_INDEX_FILE = True



###################
# EMAILS
###################

MAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_PORT = os.environ.get("EMAIL_PORT", 587)
DEFAULT_FROM_EMAIL = os.environ.get(
    "EMAIL_FROM", "TurtleStitch <turtlestitch@stitchcode.com>"
)
EMAIL_REPLY_TO = os.environ.get("EMAIL_REPLY_TO", DEFAULT_FROM_EMAIL)
EMAIL_FROM_ADDRESS = os.environ.get("EMAIL_FROM_ADDRESS", DEFAULT_FROM_EMAIL)

# use in development
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


###################
# Celery
###################
#
# REDIS_URL = os.environ.get("REDIS_URL", False)
# CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", REDIS_URL)
#

###################
# grappelli and admins
###################

GRAPPELLI_ADMIN_TITLE = "TurtleStitch Nest Administration"
GRAPPELLI_SWITCH_USER = True


###################
# filebrower
###################

FILEBROWSER_DIRECTORY = "uploads/"
FILEBROWSER_ADMIN_VERSIONS = ["thumbnail", "small", "medium", "big", "large"]
FILEBROWSER_MAX_UPLOAD_SIZE = 15485760


###################
# Taggit setup
###################

TAGGIT_CASE_INSENSITIVE = True


###################
# Wagtail setup
###################

WAGTAIL_SITE_NAME = "TurtleStitch"
WAGTAILADMIN_BASE_URL = "http://localhost:8000"


###################
# Crispy setup
###################

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"
CRISPY_CLASS_CONVERTERS = {"textinput": "border-gray-800"}

###################
# Summernote
###################


SUMMERNOTE_THEME = 'bs4'
SUMMERNOTE_CONFIG = {
    'toolbar': [
            ['style', ['style']],
            ['font', ['bold', 'underline', 'clear']],
            ['fontname', ['fontname']],
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['table', ['table']],
            ['insert', ['link', 'picture', 'video']],
            ['view', ['fullscreen', 'codeview', 'help']],
        ], 
    "css": (
        '/static/css/fonts.css',
    ),
}

###################
# Embedding models
###################


TEXT_EMBEDDING_MODEL = "BAAI/bge-small-en-v1.5"
# BAAI/bge-small-en-v1.5
# BAAI/bge-small-en
# "sentence-transformers/all-MiniLM-L6-v2"


###################
# Turtlenest specific settings
###################


SYNC_NOTES_ON_SAVE = True

WORDPRESS_API = "https://make.turtlestitch.org/wp-json/wp/v2"


###################
# SENTRY
###################

SENTRY_DSN = os.environ.get("SENTRY_DSN", default="")
ENVIRONMENT = os.environ.get("ENVIRONMENT", default="development")

if SENTRY_DSN:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(
        dsn=SENTRY_DSN, integrations=[DjangoIntegration()], environment=ENVIRONMENT
    )


###################
# Jazzmin
###################

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": True,
    "footer_small_text": True,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": False,
    "accent": "accent-success",
    "navbar": "navbar-white navbar-light",
    "no_navbar_border": False,
    "navbar_fixed": False,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": False,
    "sidebar": "sidebar-dark-success",
    "sidebar_nav_small_text": True,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "default",
    "dark_mode_theme": "darkly",
    "button_classes": {
        "primary": "btn-outline-primary",
        "secondary": "btn-outline-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    }
}

JAZZMIN_SETTINGS = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "TurtleNest",

    # Title on the login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_header": "TurtleNest",

    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_brand": "TurtleNest",

    # Logo to use for your site, must be present in static files, used for brand on top left
    "site_logo": "img/TurtleBlackGreen-150x150.png",

    # Logo to use for your site, must be present in static files, used for login form logo (defaults to site_logo)
    "login_logo": None,

    # Logo to use for login form in dark themes (defaults to login_logo)
    "login_logo_dark": None,

    # CSS classes that are applied to the logo above
    "site_logo_classes": "img-circle",

    # Relative path to a favicon for your site, will default to site_logo if absent (ideally 32x32 px)
    "site_icon": "img/favicon.png",

    # Welcome text on the login screen
    "welcome_sign": "Welcome to the Nest",

    # Copyright on the footer
    "copyright": "OSEDA",

    # List of model admins to search from the search bar, search bar omitted if excluded
    # If you want to use a single search field you dont need to use a list, you can use a simple string 
    "search_model": ["users.User", "projects.Project"],

    # Field name on user model that contains avatar ImageField/URLField/Charfield or a callable that receives the user
    "user_avatar": "avatar_url",

    ############
    # Top Menu #
    ############

    # Links to put along the top menu
    "topmenu_links": [

        # Url that gets reversed (Permissions can be added)
        {"name": "Home",  "url": "admin:index", "permissions": ["auth.view_user"]},

        # external url that opens in a new window (Permissions can be added)
        {"name": "View Site", "url": "/", "new_window": False},

        # model admin to link to (Permissions checked against model)
        {"model": "users.User"},

        # App with dropdown menu to all its models pages (Permissions checked against models)
        # {"app": "users"},
    ],

    #############
    # User Menu #
    #############

    # Additional links to include in the user menu on the top right ("app" url type is not allowed)
    "usermenu_links": [
        {"model": "users.user"}
    ],

    #############
    # Side Menu #
    #############

    # Whether to display the side menu
    "show_sidebar": True,

    # Whether to aut expand the menu
    "navigation_expanded": True,

    # Hide these apps when generating side menu e.g (auth)
    "hide_apps": ["legacydb", "wp_blog", "socialaccount",],

    # Hide these models when generating side menu (e.g auth.user)
    "hide_models": [],

    # List of apps (and/or models) to base side menu ordering off of (does not need to contain all apps/models)
    "order_with_respect_to": ["pages", "users", "projects", "classrooms", "taggit", "auth", "account", "django_summernote", ],

    # Custom links to append to app groups, keyed on app name
    # "custom_links": {
    #     "users": [{
    #         "name": "Make Messages", 
    #         "url": "make_messages", 
    #         "icon": "fas fa-comments",
    #     }]
    # },

    # Custom icons for side menu apps/models See https://fontawesome.com/icons?d=gallery&m=free&v=5.0.0,5.0.1,5.0.10,5.0.11,5.0.12,5.0.13,5.0.2,5.0.3,5.0.4,5.0.5,5.0.6,5.0.7,5.0.8,5.0.9,5.1.0,5.1.1,5.2.0,5.3.0,5.3.1,5.4.0,5.4.1,5.4.2,5.13.0,5.12.0,5.11.2,5.11.1,5.10.0,5.9.0,5.8.2,5.8.1,5.7.2,5.7.1,5.7.0,5.6.3,5.5.0,5.4.2
    # for the full list of 5.13.0 free icon classes
    "icons": {  
        "auth": "fas fa-users-cog",
        "pages.Page": "fas fa-edit",
        "users.User": "fas fa-user",
        "auth.Group": "fas fa-users",
        "projects.Category": "fas fa-list",
        "projects.Project": "fas fa-file",
        "projects.Comment": "fas fa-comments",
        "projects.Image": "fas fa-image",
        "projects.FlaggedProject": "fas fa-flag",
        "projects.Like": "fas fa-heart",
        "projects.Remix": "fas fa-repeat",
        "account.Emailaddress": "fas fa-envelope",
        "classrooms.Group": "fas fa-university",
        "classrooms.Membership": "fas fa-users",
        "classrooms.TrainerRequest": "fas fa-share",
        "classrooms.SelectedProject": "fas fa-check",
        "classrooms.Unit": "fas fa-list-ol",
        "django_summernote.Attachment": "fas fa-paperclip",
        "taggit.Tag": "fas fa-tags",
    },
    # Icons that are used when one is not manually specified
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",

    #################
    # Related Modal #
    #################
    # Use modals instead of popups
    "related_modal_active": False,

    #############
    # UI Tweaks #
    #############
    # Relative paths to custom CSS/JS scripts (must be present in static files)
    "custom_css": "css/fonts.css",
    "custom_js": None,
    # Whether to link font from fonts.googleapis.com (use custom_css to supply font otherwise)
    "use_google_fonts_cdn": False,
    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": True,

    ###############
    # Change view #
    ###############
    # Render out the change view as a single form, or in tabs, current options are
    # - single
    # - horizontal_tabs (default)
    # - vertical_tabs
    # - collapsible
    # - carousel
    "changeform_format": "horizontal_tabs",
    # override change forms on a per modeladmin basis
    "changeform_format_overrides": {"users": "collapsible", "auth.group": "vertical_tabs"},
    "language_chooser": False,
}