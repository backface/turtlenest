"""
Django settings for turtlenest project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import sys
from pathlib import Path
from django.utils.translation import gettext_lazy as _
from django.contrib import messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-n1q(gkmgn8unzo4vwvkko))uqa!p907-8gyeek@f6otn5i4+py"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", False)
TESTING = "test" in sys.argv

# APPEND_SLASH = False

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", ["*"])
CORS_ALLOWED_ORIGINS = []
CSRF_TRUSTED_ORIGINS = [
    "https://turtlestitch.org",
    "https://*.turtlestitch.org",
    "https://*.backface.net",
    "https://localhost",
]
INTERNAL_IPS = ["127.0.0.1", "172.20.0.1"]

ENABLE_DEBUG_TOOLBAR = True

# secure defaults
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


ADMINS = (("mash", "m@ash.to"),)

# Application definition

INSTALLED_APPS = [
    "grappelli",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "taggit",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.humanize",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "django_htmx",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    "allauth.socialaccount.providers.github",
    "hijack",
    "hijack.contrib.admin",
    "crispy_forms",
    "crispy_tailwind",
    
    "apps.users.apps.UserConfig",
    "apps.projects",
    # "apps.pages",
    "apps.classrooms.apps.ClassroomsConfig",
    "apps.wp_blog",
    "apps.content",
    "apps.legacydb",

    "django_cleanup.apps.CleanupConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "turtlenest.middleware.HtmxMessageMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    "hijack.middleware.HijackUserMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

if not TESTING:
    INSTALLED_APPS = [
        *INSTALLED_APPS,
        "debug_toolbar",
    ]
    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        *MIDDLEWARE,
    ]

ROOT_URLCONF = "turtlenest.urls"

AUTH_USER_MODEL = "users.User"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "turtlenest.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB", "dbname"),
        "USER": os.environ.get("POSTGRES_USER", "postgres"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "***"),
        "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    },
    "legacydb": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("LEGACYDB_DB", os.environ.get("POSTGRES_DB", "dbname")),
        "USER": os.environ.get(
            "LEGACYDB_USER", os.environ.get("POSTGRES_USER", "postgres")
        ),
        "PASSWORD": os.environ.get(
            "LEGACYDB_PASSWORD", os.environ.get("POSTGRES_PASSWORD", "***")
        ),
        "HOST": os.environ.get(
            "LEGACYDB_HOST", os.environ.get("LEGACY_HOST", "legacy-db")
        ),
        "PORT": os.environ.get(
            "LEGACYDB_PORT", os.environ.get("POSTGRES_PORT", "5432")
        ),
    },
}
DATABASE_ROUTERS = ["apps.legacydb.dbrouters.LegacyDbRouter"]


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

PASSWORD_HASHERS = [
    "apps.users.hashers.SnapPBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.BCryptPasswordHasher",
    "apps.users.hashers.CryptPasswordHasher",
    "apps.users.hashers.SHA512PasswordHasher",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]



MESSAGE_TAGS = {
    messages.DEBUG: "alert",
    messages.INFO: "alert alert-info",
    messages.SUCCESS: "alert alert-success",
    messages.WARNING: "alert alert-warning",
    messages.ERROR: "alert alert-error",
}


# Allauth settings


ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_EMAIL_VERIFICATION = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_EMAIL_SUBJECT_PREFIX = ""
ACCOUNT_SESSION_REMEMBER = True

LOGIN_REDIRECT_URL = "/myprojects"
ACCOUNT_ADAPTER = "apps.users.allauth.AccountAdapter"


SOCIALACCOUNT_PROVIDERS = {
    # "github": {
    #     "APP": {
    #         "client_id": "28f278fb843ce057ed78",
    #         "secret": "7d3aa1f15e7cacedc5f85183622674d5414cfe5c",
    #     }
    # },
    # 'google': {
    #     'SCOPE': ['https://www.googleapis.com/auth/userinfo.profile'],
    #     'APP': {
    #         'client_id': '123',
    #         'secret': '456',
    #         'key': ''
    #     }
    # },
    # 'facebook': {
    #     'APP': {
    #         'client_id': '797011021955344',
    #         'secret': '46145bf524b36f38de5fa2b4c1635e7e',
    #         'key': ''
    #     }
    # }
}


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Vienna"

USE_I18N = True

USE_TZ = True

LANGUAGES = [
    ("en", _("English")),
    ("de", _("Deutsch")),
]

LOCALE_PATHS = [
    BASE_DIR / "locale",
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


STATICFILES_DIRS = []

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"

MEDIA_ROOT = BASE_DIR / "app-data" / "media"
MEDIA_URL = "/media/"

# STORAGES = {
#     "default": {
#         "BACKEND": "django.core.files.storage.FileSystemStorage",
#     },
#     "staticfiles": {
#         "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
#         #"BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
#     }
# }

WHITENOISE_INDEX_FILE = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

###################
# EMAILS
###################

MAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_PORT = os.environ.get("EMAIL_PORT", 587)
DEFAULT_FROM_EMAIL = os.environ.get(
    "EMAIL_FROM", "TurtleStitch <turtlestitch@stitchcode.com>"
)
EMAIL_REPLY_TO = os.environ.get("EMAIL_REPLY_TO", DEFAULT_FROM_EMAIL)
EMAIL_FROM_ADDRESS = os.environ.get("EMAIL_FROM_ADDRESS", DEFAULT_FROM_EMAIL)

# use in development
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


###################
# Celery
###################

REDIS_URL = os.environ.get("REDIS_URL", False)
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", REDIS_URL)


###################
# grappelli and admins
###################


GRAPPELLI_ADMIN_TITLE = "TurtleStitch Nest Administration"
GRAPPELLI_SWITCH_USER = True


###################
# filebrower
###################

FILEBROWSER_DIRECTORY = "uploads/"
FILEBROWSER_ADMIN_VERSIONS = ["thumbnail", "small", "medium", "big", "large"]
FILEBROWSER_MAX_UPLOAD_SIZE = 15485760


###################
# Taggit setup
###################

TAGGIT_CASE_INSENSITIVE = True


###################
# Wagtail setup
###################

WAGTAIL_SITE_NAME = "TurtleStitch"
WAGTAILADMIN_BASE_URL = "http://localhost:8000"


###################
# Crispy setup
###################

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"
CRISPY_CLASS_CONVERTERS = {"textinput": "border-gray-800"}

###################
# OTHER
###################

SYNC_NOTES_ON_SAVE = True
WORDPRESS_API = "https://make.turtlestitch.org/wp-json/wp/v2"


###################
# SENTRY
###################

SENTRY_DSN = os.environ.get("SENTRY_DSN", default="")
ENVIRONMENT = os.environ.get("ENVIRONMENT", default="development")

if SENTRY_DSN:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(
        dsn=SENTRY_DSN, integrations=[DjangoIntegration()], environment=ENVIRONMENT
    )
